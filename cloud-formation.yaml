AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::SecretsManager-2020-07-23

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.
  Container:
    Type: String
    Description: ECR tag
  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Number of instances to launch in your ECS cluster.

Resources:

  # Security Group ####################################

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'
  ECSSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  ECSSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  # Cloud Watch ####################################

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

  # Fargate ####################################

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref 'AWS::StackName', api]]
      RequiresCompatibilities: 
      - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref 'ECSServiceRole'
      TaskRoleArn: !Ref 'ECSTaskRole'
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
      - Name: activities-api # NOTE: must match pipeline imagedefinitions.json keys in buildspec.yaml (SEE: buildspec.yaml)
        Essential: true
        Image: !Ref 'Container'
        PortMappings:
        - ContainerPort: 80
          Protocol: 'tcp'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: activities-api       

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ECSLoadBalancer
      Scheme: internet-facing
      Type: application
      Subnets: !Ref 'SubnetId'
      SecurityGroups: 
      - !Ref 'ECSSecurityGroup'

  ECSLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 10
      Name: ECSLoadBalancerTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 10
      VpcId: !Ref 'VpcId'

  ECSLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSLoadBalancerTargetGroup'
      LoadBalancerArn: !Ref 'ECSLoadBalancer'
      Port: 80
      Protocol: HTTP  

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ECSLoadBalancerListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      LaunchType: 'FARGATE'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref 'DesiredCapacity'
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: 'ENABLED' # TODO: find solution which doesn't give containers public IPs. Required now for ECR access.
          SecurityGroups: 
          - !Ref 'ECSSecurityGroup'
          Subnets: !Ref 'SubnetId'
      LoadBalancers:
      - ContainerName: activities-api
        ContainerPort: 80
        TargetGroupArn: !Ref 'ECSLoadBalancerTargetGroup'
      TaskDefinition: !Ref 'ECSTaskDefinition'

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action: 
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
            # Rules which allow ECS to attach network interfaces to instances
            # on your behalf in order for awsvpc networking mode to work right
            - 'ec2:AttachNetworkInterface'
            - 'ec2:CreateNetworkInterface'
            - 'ec2:CreateNetworkInterfacePermission'
            - 'ec2:DeleteNetworkInterface'
            - 'ec2:DeleteNetworkInterfacePermission'
            - 'ec2:Describe*'
            - 'ec2:DetachNetworkInterface'

            # Rules which allow ECS to update load balancers on your behalf
            # with the information sabout how to send traffic to your containers
            - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
            - 'elasticloadbalancing:DeregisterTargets'
            - 'elasticloadbalancing:Describe*'
            - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
            - 'elasticloadbalancing:RegisterTargets'

            # Rules which allow ECS to run tasks that have IAM roles assigned to them.
            - 'iam:PassRole'

            # Rules that let ECS interact with container images.
            - 'ecr:GetAuthorizationToken'
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:BatchGetImage'

            # Rules that let ECS create and push logs to CloudWatch.
            - 'logs:DescribeLogStreams'
            - 'logs:CreateLogStream'
            - 'logs:CreateLogGroup'
            - 'logs:PutLogEvents'
            Resource: '*'
  
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - ecs-tasks.amazonaws.com
          Action: 
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              # Allow the ECS Tasks to download images from ECR
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'

              # Allow the ECS tasks to upload logs to CloudWatch
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
              Resource: '*'

  # Database ####################################

  DatabaseRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Database secre'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  SecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseRotationSecret
      TargetId: !Ref Database
      TargetType: AWS::RDS::DBInstance
  
  SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref DatabaseRotationSecret
      HostedRotationLambda:
        RotationType: PostgreSQLSingleUser
        RotationLambdaName: SecretsManagerRotation
        VpcSecurityGroupIds: !Ref ECSSecurityGroup
        VpcSubnetIds: !Join [",", !Ref 'SubnetId']
        #   Fn::Join:
        #     - ","
        #     - - Ref: TestSubnet01
        #       - Ref: TestSubnet02
      RotationRules:
        AutomaticallyAfterDays: 30

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB Security Group
      VpcId: !Ref 'VpcId'
  DBSecurityGroupPostgresInbound: # TODO consider a more secure solution
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'DBSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: 0.0.0.0/0

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref AWS::StackName
      VPCSecurityGroups:
      - !Ref DBSecurityGroup
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      Engine: postgres
      MasterUsername: !Sub '{{resolve:secretsmanager:${DatabaseRotationSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseRotationSecret}::password}}'
      BackupRetentionPeriod: 0

  # CI/CD Pipeline #################################### 

  CodePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    DependsOn: CodePipelineServiceRole
    Properties:
      BucketName: !Join ['-', [!Ref 'AWS::AccountId', !Ref 'AWS::StackName', 'codepipelineartifacts']]

  CodePipelineArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CodePipelineArtifactsBucket
    Properties:
      Bucket: !Ref CodePipelineArtifactsBucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketVersioning
          - s3:PutObject
          Principal: 
            Service:
            - codepipeline.amazonaws.com
            - codebuild.amazonaws.com
          Resource:
          - !GetAtt CodePipelineArtifactsBucket.Arn
          - !Join ['', [!GetAtt CodePipelineArtifactsBucket.Arn, '/*']]

  CodeRepository:
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryName: !Ref 'AWS::StackName'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'codeBuildProject']]
      Artifacts: 
        Type: 'no_artifacts' 
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/python:3.5.2'
        PrivilegedMode: true
        EnvironmentVariables: 
        - Name: AWS_ACCOUNT_ID
          Value: !Ref 'AWS::AccountId'
        - Name: AWS_DEFAULT_REGION
          Value: !Ref 'AWS::Region'
      ServiceRole: !Ref 'CodeBuildServiceRole'
      Source:
        Type: CODECOMMIT
        Location: !GetAtt CodeRepository.CloneUrlHttp
      
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'codepipeline']]
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: []
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: '1'
            Provider: CodeCommit
          OutputArtifacts:
          - Name: !Join ['-', [!Ref 'AWS::StackName', 'sourceArtifact']]
          Configuration:
            BranchName: master
            RepositoryName: !Ref 'AWS::StackName'
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          OutputArtifacts:
          - Name: !Join ['-', [!Ref 'AWS::StackName', 'buildArtifact']]
          InputArtifacts:
          - Name: !Join ['-', [!Ref 'AWS::StackName', 'sourceArtifact']]
          Configuration:
            ProjectName: !Join ['-', [!Ref 'AWS::StackName', 'codeBuildProject']]
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: Deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: ECS
          InputArtifacts:
          - Name: !Join ['-', [!Ref 'AWS::StackName', 'buildArtifact']]
          Configuration:
            ClusterName: !Ref ECSCluster
            ServiceName: !GetAtt ECSService.Name
            FileName: imagedefinitions.json
      ArtifactStore:
        Type: S3
        Location: !Join ['-', [!Ref 'AWS::AccountId', !Ref 'AWS::StackName', 'codepipelineartifacts']]
  
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineServiceRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: CodepipelineServicePolicy
        PolicyDocument:
          Statement:
          - Action:
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            - codecommit:CancelUploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::*
            Effect: Allow
          - Action:
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - ecs:*
            - codebuild:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          Version: "2012-10-17"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CodeBuildServicePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - codecommit:ListBranches
            - codecommit:ListRepositories
            - codecommit:BatchGetRepositories
            - codecommit:Get*
            - codecommit:GitPull
            Resource:
            - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:ListBucket
            Resource: "*"
          - Effect: Allow
            Action:
            - ecr:InitiateLayerUpload
            - ecr:GetAuthorizationToken
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability
            Resource: "*"

Outputs:
  ecsservice:
    Value: !Ref 'ECSService'
  ecscluster:
    Value: !Ref 'ECSCluster'
  ecsloadlalancer:
    Description: Your ALB DNS URL
    Value: !Join ['', [!GetAtt [ECSLoadBalancer, DNSName]]]
  taskdef:
    Value: !Ref 'ECSTaskDefinition'
  coddrepourl:
    Description: CodeCommit repository to clone or add as a remote
    Value: !GetAtt CodeRepository.CloneUrlHttp
